{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#about-arctyk-itsm","title":"About Arctyk ITSM","text":"<p>Arctyk ITSM is a modular, enterprise-grade IT Service Management platform designed to streamline IT operations for organizations of all sizes. </p> <p>Built with Django and modern open-source technologies, it combines flexibility, scalability, and maintainability into a single unified solution.</p> <p>Arctyk ITSM emphasizes modular architecture, allowing you to enable or disable specific applications\u2014such as ticketing, asset management, or reporting\u2014without affecting the core system.  </p> <p>This approach makes it ideal for teams that want to start small and expand functionality over time.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#modular-design","title":"Modular Design","text":"<p>Each component of Arctyk ITSM (Tickets, Users, Assets, Reports, etc.) operates independently, allowing easy customization and deployment.</p>"},{"location":"#docker-ready","title":"Docker-Ready","text":"<p>The platform runs seamlessly in containerized environments. A full Docker Compose configuration is provided for quick setup and deployment.</p>"},{"location":"#postgresql-backend","title":"PostgreSQL Backend","text":"<p>Leverages PostgreSQL for robust data management and high-performance querying.</p>"},{"location":"#django-framework","title":"Django Framework","text":"<p>Powered by Django, providing a secure, extensible foundation and full compatibility with enterprise-grade authentication and middleware.</p>"},{"location":"#responsive-ui","title":"Responsive UI","text":"<p>The front end follows modern design practices and integrates easily with Bootstrap 5 for a consistent and accessible user experience.</p>"},{"location":"#integration-ready","title":"Integration-Ready","text":"<p>Arctyk ITSM can integrate with third-party tools such as Jira, Zendesk, or custom REST APIs, supporting a connected IT ecosystem.</p>"},{"location":"#project-goals","title":"Project Goals","text":"<ol> <li>Deliver a modular and maintainable ITSM solution.</li> <li>Provide a developer-friendly architecture using Django best practices.</li> <li>Support automated deployment and CI/CD workflows.</li> <li>Enable comprehensive documentation for each release version.</li> <li>Maintain transparency and traceability through changelogs and audit features.</li> </ol>"},{"location":"#repository-structure","title":"Repository Structure","text":"<p>Arctyk ITSM is composed of multiple repositories for scalability and clean separation of concerns:</p> Repository Purpose arctyk-itsm All applications and backend services. arctyk-core The core application which includes the ticketing System and user Mangement. arctyk-docs Documentation and versioned release guides. arctyk-ui Optional frontend or UI modules (if separated). arctyk-deploy Deployment configurations (Docker, CI/CD pipelines)."},{"location":"#documentation-philosophy","title":"Documentation Philosophy","text":"<p>Arctyk Docs follows the MkDocs Material standard for structure and readability. Documentation is built to be version-aware, ensuring users can always reference the correct guides for their deployed version.</p> <p>Each release includes:</p> <ul> <li>Installation and configuration instructions</li> <li>Deployment and update guides</li> <li>Developer best practices</li> <li>Release notes and version changelogs</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To begin exploring Arctyk ITSM, start with these guides:</p> <ul> <li>Installation Guide</li> <li>Configuration Guide</li> <li>Deployment Guide</li> </ul>"},{"location":"#license-and-contributions","title":"License and Contributions","text":"<p>Arctyk ITSM is released under the MIT License. Contributions are welcome and encouraged. Developers can submit pull requests for both the core platform and documentation repositories. For contribution guidelines, see the <code>CONTRIBUTING.md</code> file in each repository.</p> <p>Current Version: v0.7.0-alpha.0 Documentation Source: https://github.com/Arctyk-ITSM/arctyk-docs</p>"},{"location":"version/","title":"Arctyk ITSM Versioning Guide","text":"<p>This document defines how versions are assigned and advanced across the lifecycle of Arctyk ITSM. We follow Semantic Versioning 2.0.0 with added stage suffixes to indicate stability.</p>"},{"location":"version/#current-baseline","title":"Current baseline","text":"<p>`v0.3.0-dev.0'</p>"},{"location":"version/#version-format","title":"Version Format","text":"<ul> <li>MAJOR \u2013 Breaking changes or major architecture shifts  </li> <li>MINOR \u2013 New features added in a backward-compatible way  </li> <li>PATCH \u2013 Bug fixes or maintenance releases  </li> <li>TAG \u2013 Optional stability tag: <code>dev</code>, <code>alpha</code>, <code>beta</code>, or <code>rc</code> </li> <li>NUMBER \u2013 Incremental build or iteration number (e.g., <code>-dev.2</code>)</li> </ul> <p>Example: <code>0.3.0-dev.0</code></p>"},{"location":"version/#stability-tags","title":"Stability Tags","text":"Tag Meaning Usage -dev In-development, unstable internal builds Active daily development -alpha Experimental snapshot, new features under test Early external preview -beta Feature-complete, needs testing &amp; feedback Pre-release stabilization -rc Release candidate, pending final QA Near-final validation (none) Stable release Production-ready version"},{"location":"version/#version-roadmap","title":"Version Roadmap","text":"Phase Range Stage Focus v0.3.x Development Core stabilization Fix timezone consistency, Celery integration, recurring tickets, and asset management polish v0.4.x Alpha Feature expansion Modular app design, changelog app, import/export, CI/CD integration v0.5.x Beta Integration testing Role-based access, unit &amp; integration tests, API documentation v0.6.x Beta UX/UI refinement Bootstrap polish, admin cleanup, user documentation v0.7.x RC Release Candidate Final testing, performance tuning, migration stability v1.0.0 Stable Production Release First production-ready build of Arctyk ITSM v1.1+ Post-release Incremental improvements Analytics, integrations, and new modules"},{"location":"version/#example-progression","title":"Example Progression","text":"<ul> <li>v0.3.0-dev.0 \u2192 Initial development baseline  </li> <li>v0.3.1-dev.1 \u2192 Minor fixes</li> <li>v0.4.0-alpha.0 \u2192 Begin modularization phase</li> <li>v0.5.0-beta.0 \u2192 Begin stabilization and testing</li> <li>v0.7.0-rc.0 \u2192 Release candidate for 1.0</li> <li>v1.0.0 \u2192 Stable production release</li> </ul>"},{"location":"version/#automation-optional","title":"Automation (Optional)","text":"<p>We use bumpver or semantic-release for automated version management. The automation is added to our <code>pyproject.toml</code> located in the project root.</p> <p>Example <code>pyproject.toml</code>:</p> <pre><code>[tool.bumpver]\ncurrent_version = \"0.3.0-dev.0\"\nversion_pattern = \"MAJOR.MINOR.PATCH[-TAG.NUMBER]\"\ncommit_message = \"chore: bump version to {new_version}\"\ntag_message = \"Release {new_version}\"\n</code></pre>"},{"location":"version/#notes","title":"Notes","text":"<ul> <li>Keep all changelog entries under <code>CHANGELOG.md</code> </li> <li>Each tagged release should include migration notes and upgrade guidance    </li> <li>Avoid skipping version numbers\u2014increment meaningfully based on work completed</li> </ul>"},{"location":"components/breadcrumbs/","title":"Breadcrumbs","text":"<p>Coming soon...</p>"},{"location":"components/comments/","title":"Comments","text":"<p>Coming soon...</p>"},{"location":"components/pagination/","title":"Pagination","text":"<p>Pagination is a global feature which provides a consistent experience across all Arctyk apps.</p> <p>Pagination should be added to any list page (e.g. Users, Tickets, Assets, etc.). It is configured to automatically adapts its empty-state text and behavior \u2014 without writing a single extra line of code in the template.</p> Feature Behavior Auto-detect base URL \u2705 Works with any list view Keeps filters/search/sort \u2705 Preserves all params Collapsible long page ranges \u2705 \u201c1 \u2026 5 6 7 \u2026 20\u201d Bootstrap icons \u2705 No entity references Reusable across apps \u2705 Users / Assets / Tickets Auto-scroll-to-top \u2705 When switching pages"},{"location":"components/pagination/#location","title":"Location","text":"<pre><code>templates/partials/pagination.html\n</code></pre>"},{"location":"components/pagination/#usage","title":"Usage","text":"<p>For basic usage, you would add the following to any template:</p> <pre><code>{% include \"partials/pagination.html\" %}\n</code></pre>"},{"location":"components/pagination/#usage-within-arctyk-templates","title":"Usage within Arctyk Templates","text":"<p>The following snippets show how pagination should be added to a template in an Arctyk app. The snippet should include a comment, div tags Bootstrap class applied. </p> <p>The include statements should reference the model, view an page_obj which allows us to customize it for each app. It will also dynamically display context-aware messages.</p> <p>In Users list:</p> <pre><code>\u00a0&lt;!-- Pagination --&gt;\n&lt;div class=\"mt-3\"&gt;\n    {% include \"partials/pagination.html\" with page_obj=page_obj model_name=\"users\" view_name=\"user_list\" %}\n&lt;/div&gt;\n</code></pre> <p>In Assets list:</p> <pre><code>&lt;!-- Pagination --&gt;\n&lt;div class=\"mt-3\"&gt;\n    {% include \"partials/pagination.html\" with view_name=\"asset_list\" model_name=\"assets\" %}\n&lt;/div&gt;\n</code></pre> <p>In Tickets list:</p> <pre><code>&lt;div class=\"mt-3\"&gt;\n    {% include \"partials/pagination.html\" with view_name=\"ticket_list\" model_name=\"tickets\" %}\n&lt;/div&gt;\n</code></pre>"},{"location":"components/pagination/#visibility","title":"Visibility","text":"<p>This condition controls everything:</p> <pre><code>{% if page_obj and page_obj.paginator.num_pages &gt; 1 %}\n</code></pre> <p>That line checks:</p> <ol> <li>Whether a <code>page_obj</code> exists (so the view passed paginated data), and </li> <li>Whether the total number of pages (<code>num_pages</code>) is greater than 1.</li> </ol> <p>If there\u2019s only one page of results (e.g. &lt; 10 items for a 10-item paginator): The entire <code>&lt;nav&gt;</code> block and <code>&lt;ul class=\"pagination\"&gt;</code> are skipped entirely.</p> <p>If there are no results at all (e.g. an empty list): Since <code>page_obj</code> still exists but <code>paginator.num_pages</code> == 1 (or 0), it\u2019s also hidden.</p> Case Pagination Visible? Multiple pages of results (2+) \u2705 Yes Single page of results \ud83d\udeab No No results at all \ud83d\udeab No Non-paginated list \ud83d\udeab No (no <code>page_obj</code>)"},{"location":"components/pagination/#requirements","title":"Requirements","text":"<p>Make sure you have the helper tag available once globally \u2014 it\u2019s what preserves filters and sorting:</p> <p>Location: <code>core/templatetags/querystring_tags.py</code></p> <pre><code>Remember to load it at the top of any template using pagination:\n\n`{% load querystring_tags %}`\n</code></pre>"},{"location":"design/branding/","title":"Branding","text":"<p>Coming soon...</p>"},{"location":"design/ui-components/","title":"Design - UI Components","text":""},{"location":"design/ui-components/#bootstrap-used-in-arctyk-itsm","title":"Bootstrap used in Arctyk ITSM","text":""},{"location":"design/ui-components/#containers","title":"Containers","text":"Selector Where to use body <code>base.html</code> .container-lg <code>edit_profile</code>, <code>edit_user</code>"},{"location":"design/ui-components/#django-linting-styles","title":"Django Linting &amp; Styles","text":""},{"location":"design/ui-components/#django-block-tags","title":"Django Block Tags","text":"<p>Endblock tags must contain the matching name of the start block tag or it will be flagged as a linting error.</p> <p>Example:</p> <pre><code>{% block title %}Users \u2013 Arctyk ITSM{% endblock title %}\n</code></pre>"},{"location":"design/ui-components/#block-tags-require-whitespace","title":"Block Tags Require Whitespace:","text":"<p>All block tags require whitespace between the <code>{%</code> and <code>block text</code> and <code>%}</code>. Otherwise it will result in linting error.</p>"},{"location":"design/ui-components/#inline-styles","title":"Inline Styles","text":"<p>Inline styles should be avoided. When possible, use default Bootstrap v5.3 <code>class</code> and <code>id</code> attributes for styles. </p> <p>Example:</p> <pre><code>&lt;img src=\"{{ user.profile.picture.url }}\"\n     alt=\"Profile Picture\"\n     class=\"img-thumbnail\"\n     width=\"150\"\n     height=\"150\"&gt;\n</code></pre> <p>If it is not possible to use default Bootstrap styles, you will need to create a custom style in <code>_site.scss</code> or <code>app.scss</code>.</p>"},{"location":"design/ui-components/#images","title":"Images","text":"<p>Images should include the following:</p> <ul> <li>Img tag should have height and width attributes.</li> <li>Img tag should have defined <code>alt</code> atrributes</li> </ul> <p>Example: <pre><code>&lt;img src=\"{{ user.profile.picture.url }}\"\n     alt=\"Profile Picture\"\n     class=\"img-thumbnail\"\n     width=\"150\"\n     height=\"150\"&gt;\n</code></pre></p>"},{"location":"developer-guide/api-reference/","title":"API Reference","text":"<p>Coming soon...</p>"},{"location":"developer-guide/architecture/","title":"Architecture","text":"<p>Coming soon...</p>"},{"location":"developer-guide/changelog/","title":"Changelog","text":""},{"location":"developer-guide/changelog/#v070-alpha0-2025-10-02","title":"[v0.7.0-alpha.0] - 2025-10-02","text":""},{"location":"developer-guide/changelog/#added","title":"Added","text":"<ul> <li><code>entrypoint.sh</code> automates the Docker image runtime setup</li> <li>Default user bootstrap:<ul> <li><code>superuser</code> created automatically from <code>.env</code> variables</li> <li><code>admin</code> user created automatically and added to Admins group</li> </ul> </li> <li>Default role creation (Admins, Agents, Managers, End Users)</li> <li>Environment based start-up<ul> <li>configuratable from <code>.env</code></li> </ul> </li> </ul>"},{"location":"developer-guide/changelog/#changed","title":"Changed","text":"<ul> <li><code>Dockerfile</code> refactored for multi-stage build to keep runtime image smaller, faster and with less vulnderabilities:<ul> <li>Stage 1 (builder)<ul> <li>installs Node</li> <li>installs compiliers</li> <li>installs Python deps</li> <li>builds CSS</li> </ul> </li> <li>Stage 2 (runtime) <ul> <li>Only includes what's needed to run Django</li> </ul> </li> </ul> </li> <li><code>entrypoint.sh</code> used for run time setup:<ul> <li>Run migrations</li> <li>Collect static</li> <li>Create superuser if missing</li> <li>Start Gunicorn (ASGI mode)</li> <li>Or run Celery (worker service)</li> </ul> </li> <li><code>docker-compose.yml</code> refactored for orchestration:<ul> <li>define services (db, redis, worker, etc.)</li> <li>does not handle app logic</li> </ul> </li> <li><code>.dockerignore</code> added refinements to make it tighter and safer</li> </ul>"},{"location":"developer-guide/changelog/#v060-alpha2","title":"v0.6.0-alpha.2","text":""},{"location":"developer-guide/changelog/#added_1","title":"Added","text":"<ul> <li>Create Docker contaier<ul> <li>docker-compose.yml  // production</li> <li>docker-compose-override.yml  // development </li> <li>added .dockerignore</li> </ul> </li> <li>config/management/commands/create_superuser.py<ul> <li>create_superuser.py will create a super user only if one does not already exist</li> </ul> </li> <li>.env to map security keys, database connection details and create superuser credentials</li> <li>added debug toolbar</li> <li>added whitenoise middleware to serve static files in production</li> <li>added ticket imports</li> <li>cleaned up tickets UI/UX</li> </ul>"},{"location":"developer-guide/changelog/#v060-alpha1","title":"v0.6.0-alpha.1","text":""},{"location":"developer-guide/changelog/#added_2","title":"Added","text":"<ul> <li>Zendesk/Jira-style list presets: /tickets/assigned/, /tickets/mine/, /tickets/new/, priority/due filters.</li> <li>Saved Views (create/apply/delete), shared views (staff).</li> <li>Bulk quick actions: archive/restore/assign-to-me/set-status.</li> <li>CSV export honoring current filters.</li> </ul>"},{"location":"developer-guide/changelog/#changed_1","title":"Changed","text":"<ul> <li>Tickets templates moved to app path: src/tickets/templates/tickets/.</li> <li>Unified list view &amp; sorting/pagination helpers.</li> </ul>"},{"location":"developer-guide/changelog/#migration","title":"Migration","text":"<ul> <li>Run <code>manage.py migrate</code> (adds TicketSavedView).</li> </ul>"},{"location":"developer-guide/changelog/#deprecations","title":"Deprecations","text":"<ul> <li>Legacy list/archived-by-tag URLs kept for now; slated for removal in a future major.`</li> </ul>"},{"location":"developer-guide/changelog/#v050-alpha2","title":"v0.5.0-alpha.2","text":""},{"location":"developer-guide/changelog/#tickets-app","title":"Tickets App","text":"<ul> <li>Refactored models.py<ul> <li>Created new model to handle ticket views</li> <li>Added Saved Views (user + team-shared, URL-param based)</li> <li>Added Bulk quick actions (Archive/Restore, Assign to me, Set Status)</li> </ul> </li> <li>Refactored views.py<ul> <li>Created a base ticket view which can be used to generate new ticket views</li> <li>Converted function-based views to class-based views</li> </ul> </li> <li>Refactored urls.py<ul> <li>Saved Views, Bulk quick actions, CSV export</li> <li>fixed the duplicate archived/ route (keeps the CBV at archived/, moves the legacy tag-based list to archived-tag/)</li> <li>set canonical CRUD names (detail, create, edit, delete) to match updated views/templates</li> </ul> </li> <li>Refactored admin.py</li> <li>Added Saved Views which allows agents/admins to bookmark complex filters and share them with the team</li> <li>Added Bulk quick actions to provide common operations right above the list (Archive/Restore/Assign/Set Status)</li> <li>Added CSV Export to deliver the current filtered/sorted set (good for reporting)</li> </ul>"},{"location":"developer-guide/changelog/#v050-alpha1","title":"v0.5.0-alpha.1","text":""},{"location":"developer-guide/changelog/#core-app","title":"Core App","text":"<ul> <li>Rafactored static files to improve bootstrap, SCSS/CSS generation</li> </ul>"},{"location":"developer-guide/changelog/#ticket-app-updates","title":"Ticket App updates","text":"<ul> <li>Added Category to ticket_detail.html</li> </ul>"},{"location":"developer-guide/changelog/#v050-alpha0","title":"v0.5.0-alpha.0","text":""},{"location":"developer-guide/changelog/#ticket-app-updates_1","title":"Ticket App Updates","text":"<ul> <li>Overdue tickets are now identified in ticket list table<ul> <li>Will identify tickets by adding an Overdue tag in the Due Date column</li> <li>If ticket is solved or closed, the ticket will not be tagged</li> </ul> </li> <li>Fixed Bulk Edit tickets</li> <li>Added bulk archive tickets<ul> <li>Created tickets/archived_list.html</li> <li>Updated tickets/views.py</li> </ul> </li> <li>Added bulk restore tickets</li> <li>Fixed Page length selection</li> <li>Fixed search and filters</li> <li>Change Meta options on ticket<ul> <li>Alter field category on ticket</li> <li>Alter field status on ticket</li> </ul> </li> <li>Refactored tickets/models.py<ul> <li>Corrected due date restriction to allow past dates</li> </ul> </li> <li>Refactored tickets/views.py<ul> <li>updated ticket list views<ul> <li>Added classed-based views (CBV)</li> <li>Updated existing function-based views (FBV) </li> </ul> </li> </ul> </li> </ul>"},{"location":"developer-guide/contributing/","title":"Contributing to Arctyk ITSM","text":"<p>Thank you for your interest in contributing to Arctyk ITSM!  </p> <p>We welcome all contributions, whether it\u2019s code, documentation, design, or ideas. This guide will help you get started.</p>"},{"location":"developer-guide/contributing/#table-of-contents","title":"Table of Contents","text":"<ol> <li>How to Get Involved</li> <li>Discussions</li> <li>Issues</li> <li>Code Contributions</li> <li>Development Setup</li> <li>Coding Standards</li> <li>Pull Requests</li> <li>Community Guidelines</li> </ol>"},{"location":"developer-guide/contributing/#how-to-get-involved","title":"How to Get Involved","text":"<p>There are many ways to contribute: - Participate in GitHub Discussions. - Report bugs and request features via Issues. - Contribute code, docs, or tests with pull requests. - Share your use cases and feedback to guide our roadmap.</p>"},{"location":"developer-guide/contributing/#discussions","title":"Discussions","text":"<p>Use Discussions for: - Asking questions - Brainstorming new features - Reviewing the roadmap - Connecting with other users and contributors</p>"},{"location":"developer-guide/contributing/#issues","title":"Issues","text":"<ul> <li>Search existing issues before creating a new one.  </li> <li>For bugs, include:</li> <li>Steps to reproduce</li> <li>Expected behavior</li> <li>Actual behavior</li> <li>Environment (OS, Python/Django version, etc.)</li> <li>For feature requests, describe the problem and the proposed solution.</li> </ul>"},{"location":"developer-guide/contributing/#code-contributions","title":"Code Contributions","text":"<p>We follow a modular approach: - arctyk-itsm \u2192 full ITSM platform - arctyk-tickets \u2192 core tickets module - Future apps (inventory, reports, etc.) will live in their own repos  </p> <p>Contribute code to the relevant app repo, not the community repo.</p>"},{"location":"developer-guide/contributing/#development-setup","title":"Development Setup","text":"<ol> <li>Fork the repo you want to contribute to (e.g., <code>arctyk-itsm</code> or <code>arctyk-docs</code>).</li> <li>Clone your fork locally:    <code>bash    git clone git@github.com:your-username/arctyk-itsm.git    cd arctyk-itsm</code></li> <li> <p>Create a virtual environment:</p> <p><pre><code>py -m venv .venv\n.\\.venv\\Scripts\\activate\n</code></pre> 4. Install dependencies: <pre><code>pip install -r requirements.txt\n</code></pre> 5. Run tests: <pre><code>pytest\n</code></pre></p> </li> </ol> <p>Install pre-commit hooks directly:</p> <pre><code>pip install pre-commit\npre-commit install\n</code></pre>"},{"location":"developer-guide/contributing/#coding-standards","title":"Coding Standards","text":"<ul> <li>Python: PEP8</li> <li>Linting &amp; Formatting: enforced via pre-commit (<code>black</code>, <code>flake8</code>, <code>autoflake</code>)</li> <li>Commits: use Convential Commits</li> <li><code>feat: add ticket assignment</code></li> <li><code>fix: resolve migration conflict</code></li> <li><code>chore: update dependencies</code></li> </ul>"},{"location":"developer-guide/contributing/#pull-requests","title":"Pull Requests","text":"<ol> <li>Create a feature branch:     <pre><code>git checkout -b feature/my-new-feature\n</code></pre></li> <li>Commit your changes with a clear message:     <pre><code>git commit -m \"feat: add bulk ticket assignment\"\n</code></pre></li> <li>Push to your fork:     <pre><code>git push origin feature/my-new-feature\n</code></pre></li> <li>Open a Pull Request against the <code>dev</code> brach of the repo.</li> <li>Ensure:<ul> <li>All tests pass</li> <li>Pre-commit hooks pass</li> <li>PR description explains why the change is neeeded</li> </ul> </li> </ol>"},{"location":"developer-guide/contributing/#community-guidelines","title":"Community Guidelines","text":"<p>We follow the Contributor Covenant Code of Conduct.</p> <p>Be respectful, inclusive and collaborative.</p>"},{"location":"developer-guide/contributing/#questions","title":"Questions?","text":"<p>Join the conversation in Discusssions or open an Issue in the relevant repo. We're excited to build Arctyk ITSM together!</p>"},{"location":"developer-guide/docker-reference/","title":"Docker Commands","text":"<p>Here are some useful Docker commands for quick reference.</p>"},{"location":"developer-guide/docker-reference/#docker-commands_1","title":"Docker Commands","text":"<ul> <li><code>docker compose up --build</code> # restart docker after code changes and build container</li> <li><code>docker compose up -d --build</code> # starts in detatched mode which starts your services in the background</li> <li><code>docker compose up -d</code> # start the stack - brings up Django/Gunicorn/Uvicorn ASGI, Postgres and nginx (if installed)</li> <li><code>docker compose down</code> # shutdown docker / stop app</li> <li><code>docker compose down -v</code> # shutdown docker and remove volumes to reset the DB container</li> <li><code>docker compose restart web</code> # restart a service</li> <li><code>docker compose ps</code> # check status</li> <li><code>docker compose logs -f</code> # see live logs</li> <li><code>docker compose run --rm web python src/manage.py createsuperuser</code> # creates a superuser</li> <li><code>docker compose -f docker-compose.yml -f docker-compose.override.yml exec web python src/manage.py makemigrations</code>  # makemigration using multiple compose files</li> <li><code>docker compose -f docker-compose.yml -f docker-compose.override.yml exec web python src/manage.py migrate</code>  # migrate using multiple compose files</li> <li><code>docker compose run web python src/manage.py migrate</code> # migrate the database to the container</li> <li><code>docker compose run --rm web python src/manage.py collectstatic --noinput</code> # run when changes have been made to static files (CSS, JS, etc.)</li> <li><code>docker compose run --rm web pytest</code> # run tests</li> <li><code>docker system prune -af</code>  # will remove unused containers, networks, images, and cache</li> </ul>"},{"location":"developer-guide/docker-reference/#docker-command-flags","title":"Docker Command Flags","text":"<ul> <li><code>-d</code> = detached mode</li> <li>starts services in background and returns you to the prompt when finished running command</li> <li><code>--build</code> = Builds/re-builds images before starting</li> <li>Useful after code or Dockerfile changes</li> <li><code>--rm</code> = remove the container when it exits (auto-cleanup)</li> <li>Deletes stopped container right after the command finishes</li> <li>Prevents clutter from lots of exited contaienrs</li> <li>It doesn't remove images</li> <li>It doesn't remove volumens</li> <li>It doesn't affect networks created by Compose</li> <li>Use with one-shot tasks: <code>migrate</code>, <code>collectstatic</code>, <code>createsuperuser</code>, ad-hoc scripts</li> </ul>"},{"location":"developer-guide/docker-reference/#project-dependencies","title":"Project Dependencies","text":"<p>If you updated dependencies (e.g. changed requirements.txt) you will need to rebuild the Docker image.</p> <p>To rebuild:</p> <p><pre><code>docker compose build web\n</code></pre> Or to rebuild everything:</p> <pre><code>docker-compose build\n</code></pre>"},{"location":"developer-guide/documentation/","title":"Arctyk ITSM Documentation Style Guide","text":"<p>This guide defines the writing, formatting, and Markdown conventions for the Arctyk ITSM documentation. Following these standards ensures all docs are clear, consistent, and professional \u2014 across every module and version.</p>"},{"location":"developer-guide/documentation/#writing-style","title":"Writing Style","text":"<p>Tone:</p> <ul> <li>Professional, clear, and concise</li> <li>Neutral and helpful (avoid jargon and slang)</li> <li>Use second person (\u201cyou\u201d) when addressing the reader</li> <li>Use active voice whenever possible</li> </ul> <p>Examples:</p> <ul> <li>\u201cRun the command to start the container.\u201d</li> <li>\u201cThe container can be started by running the command.\u201d</li> </ul>"},{"location":"developer-guide/documentation/#document-structure","title":"Document Structure","text":"<p>Each page should follow this structure:</p> <p><pre><code># Title (H1)\n\nShort one-sentence summary.\n\n---\n\n## Section (H2)\nExplanation of a concept or task.\n\n### Subsection (H3)\nDetails or examples.\n\n!!! tip\n    Use callouts for helpful advice or best practices.\n\n---\n</code></pre> Best Practices:</p> <ul> <li>Use one H1 (#) per page (the page title)</li> <li>Start each section with a brief overview sentence</li> <li>Use H2 (##) for major sections, and H3 (###) for subsections</li> <li>Separate major sections with horizontal rules (---)</li> </ul>"},{"location":"developer-guide/documentation/#admonitions-tips-notes-warnings","title":"Admonitions (Tips, Notes, Warnings)","text":"<p>Use admonitions (MkDocs Material feature) to highlight key points.</p> <p>Examples:</p> <p><pre><code>!!! note\n    This is a general note for extra context.\n\n!!! tip \"Pro Tip\"\n    You can rebuild the stack using `docker compose up -d --build`.\n\n!!! warning \"Be Careful!\"\n    Never commit your `.env` file to version control.\n\n!!! success \"Deployment Complete\"\n    Your container is running successfully at `http://127.0.0.1:8000`.\n</code></pre> Output:</p> <p>Note</p> <p>This is a general note for extra context.</p> <p>Pro Tip</p> <p>You can rebuild the stack using docker compose up -d --build.</p> <p>Be Careful!</p> <p>Never commit your <code>.env</code> file to version control.</p> <p>Deployment Complete</p> <p>Your container is running successfully at <code>http://127.0.0.1:8000</code>.</p>"},{"location":"developer-guide/documentation/#code-blocks","title":"Code Blocks","text":""},{"location":"developer-guide/documentation/#code-blocks_1","title":"Code blocks","text":"<p>Use fenced code blocks with syntax highlighting:</p> <pre><code>```bash\n# Terminal / shell\ndocker compose up -d\n```\n</code></pre> <pre><code>```python\n# Python example\nfrom django.conf import settings\nprint(settings.DEBUG)\n```\n</code></pre> <p><pre><code>```yaml\n# Docker Compose\nversion: \"3.9\"\nservices:\nweb:\n    build: .\n```\n</code></pre> If you want to show an inline code example that contains backticks, simply use more backticks around it than the example itself.</p>"},{"location":"developer-guide/documentation/#inline-code","title":"Inline code","text":"<p>Use backticks <code>``</code> for commands, filenames, or variables.</p> <p>Example:</p> <p>Run python <code>`manage.py migrate`</code> to apply database changes.</p>"},{"location":"developer-guide/documentation/#showing-markdown-literals","title":"Showing Markdown Literals","text":"<p>When writing documentation about Markdown itself, you\u2019ll sometimes want to show characters like backticks (`<code>), asterisks (*</code>), or code fences (```) without triggering Markdown formatting.</p> <p>This section explains how to safely render those symbols in your Arctyk ITSM documentation.</p>"},{"location":"developer-guide/documentation/#showing-code-fences-triple-backticks","title":"Showing Code Fences (Triple Backticks)","text":"<pre><code>````markdown\n```bash\ndocker compose up -d\n```\n````\n</code></pre>"},{"location":"developer-guide/documentation/#nested-code-fences","title":"Nested Code Fences","text":"<p>When showing Markdown examples that already contain code blocks, you must nest backtick fences correctly. The outer fence must always have more backticks than the inner one. </p> <p>Level 1 \u2014 Normal Code Block (3 backticks) <pre><code>```bash\ndocker compose up -d\n```\n</code></pre> Leve 1 Output:</p> <p><pre><code>docker compose up -d\n</code></pre> Level 2 \u2014 Showing a Code Block (4 backticks) <pre><code>````markdown\n```bash\ndocker compose up -d\n```\n````\n</code></pre> Level 2 Output: <pre><code>```bash\ndocker compose up -d\n```\n</code></pre> Level 3 \u2014 Showing an Example of the Example (5 backticks) <pre><code>`````markdown\n````markdown\n```bash\ndocker compose up -d\n```\n````\n`````\n</code></pre> Level 3 Output: <pre><code>````markdown\n```bash\ndocker compose up -d\n```\n````\n</code></pre></p>"},{"location":"developer-guide/documentation/#showing-code-inside-an-admonition","title":"Showing Code Inside an Admonition","text":"<p>You can even nest these inside an admonition (like a Tip or Example block):</p> <p>If you want to show a literal code block example like this:</p> <p><pre><code>!!! example \"Show Markdown Example\"\n    ````markdown\n    ```bash\n    docker compose up -d\n    ```\n    ````\n</code></pre> Output:</p> <p>Show Markdown Example</p> <p>markdown <code>bash docker compose up -d</code></p>"},{"location":"developer-guide/documentation/#inline-backticks","title":"Inline Backticks","text":"<p>Here\u2019s how to use <code>`inline code`</code> in Markdown.</p>"},{"location":"developer-guide/documentation/#escaping-markdown-characters","title":"Escaping Markdown Characters","text":"<p>If you need to show Markdown symbols (like *, |, #) as text, you can escape them with a backslash \\:</p> Symbol Escaped Form Example Output <code>*</code> <code>\\*</code> asterisks <code>_</code> <code>\\_</code> underscores <code>|</code> <code>\\|</code> pipes <code>#</code> <code>\\#</code> # heading symbol <code>`</code> <code>\\`</code> <code>backtick</code>"},{"location":"developer-guide/documentation/#using-html-entities","title":"Using HTML Entities","text":"<p>As a fallback (useful inside tables or inline text), you can replace special characters with HTML entities:</p> Character HTML Code Output Backtick <code>&amp;#96;</code> ` Less than <code>&amp;lt;</code> &lt; Greater than <code>&amp;gt;</code> &gt; Ampersand <code>&amp;amp;</code> &amp;"},{"location":"developer-guide/documentation/#tables-containing-literal-markdown","title":"Tables Containing Literal Markdown","text":"<p>When writing Markdown tables that include Markdown symbols (like *, #, or backticks), you must escape those characters or use HTML entities to prevent Markdown from interpreting them.</p> <p>Example Table with Escaped Markdown:</p> <p><pre><code>| Symbol | Escaped Example | Renders As |\n|---------|-----------------|------------|\n| `*` | `\\*bold\\*` | \\*bold\\* |\n| `_` | `\\_italic\\_` | \\_italic\\_ |\n| `#` | `\\# heading` | \\# heading |\n| `` ` `` | `` \\`code\\` `` | \\`code\\` |\n| `|` | `\\| pipe \\|` | \\| pipe \\| |\n</code></pre> Example Table Output:</p> Symbol Escaped Example Renders As <code>*</code> <code>\\*bold\\*</code> *bold* <code>_</code> <code>\\_italic\\_</code> _italic_ <code>#</code> <code>\\# heading</code> # heading <code>`</code> <code>\\`code\\`</code> `code` <code>|</code> <code>\\| pipe \\|</code> | pipe |"},{"location":"developer-guide/documentation/#using-html-entities-in-tables","title":"Using HTML Entities in Tables","text":"<p>Sometimes escaping isn\u2019t enough \u2014 for instance, when showing multiple backticks in one cell. In those cases, use HTML entities instead of literal characters:</p> <pre><code>| Description | Example |\n|--------------|----------|\n| Triple backticks | &amp;#96;&amp;#96;&amp;#96;bash ... &amp;#96;&amp;#96;&amp;#96; |\n| Greater than symbol | &amp;gt; Quote |\n| Ampersand | &amp;amp; |\n</code></pre> <p>Example Output:</p> Description Example Triple backticks ```bash ... ``` Greater than symbol &gt; Quote Ampersand &amp; <p>Tips</p> <ul> <li>Always wrap table contents in backticks or escape special symbols.</li> <li>Avoid multi-line code blocks inside tables \u2014 instead, show examples below the table.</li> <li>If Markdown syntax doesn\u2019t render as expected, try using HTML equivalents (e.g. <code> or `)."},{"location":"developer-guide/documentation/#tables","title":"Tables","text":"<p>Keep tables simple and aligned. Use them for configuration summaries, variable lists, or comparisons.</p> <p><pre><code>| Variable | Description | Example |\n|-----------|-------------|----------|\n| `DEBUG` | Enables or disables debug mode | `False` |\n| `DB_PORT` | Database port number | `5433` |\n| `TIME_ZONE` | Server timezone | `America/Toronto` |\n</code></pre> Output:</p> Variable Description Example <code>DEBUG</code> Enables or disables debug mode <code>False</code> <code>DB_PORT</code> Database port number <code>5433</code> <code>TIME_ZONE</code> Server timezone <code>America/Toronto</code>"},{"location":"developer-guide/documentation/#linking","title":"Linking","text":""},{"location":"developer-guide/documentation/#internal-links","title":"Internal Links","text":"<p>Link to other pages in the documentation using relative paths:</p> <pre><code>See [Configuration](../getting-started/configuration.md) for environment setup.\n</code></pre>"},{"location":"developer-guide/documentation/#external-links","title":"External Links","text":"<p>Use standard Markdown syntax:</p> <pre><code>Learn more at [Django Documentation](https://docs.djangoproject.com/).\n</code></pre>"},{"location":"developer-guide/documentation/#images-diagrams","title":"Images &amp; Diagrams","text":"<p>Place all images in <code>docs/assets/</code>.</p> <pre><code>![Arctyk Architecture Diagram](../assets/architecture-diagram.png)\n</code></pre> <p>Tip</p> <p>Use SVG or PNG for diagrams, and compress large images to &lt; 500 KB.</p>"},{"location":"developer-guide/documentation/#lists-and-steps","title":"Lists and Steps","text":"<p>Use numbered lists for sequential steps, and bulleted lists for unordered details.</p>"},{"location":"developer-guide/documentation/#numbered-lists","title":"Numbered Lists:","text":"<p>Numbered lists are often referred to as ordered lists. Best used for sequential steps.</p> <p>Example: Complete the following steps to install Arctyk ITSM docker:</p> <pre><code>1. Clone the repository.\n2. Copy the `.env.example` to `.env`.\n3. Run `docker compose up -d` to start services.\n</code></pre> <p>Output:</p> <ol> <li>Clone the repository.</li> <li>Copy the <code>.env.example</code> to <code>.env</code>.</li> <li>Run <code>docker compose up -d</code> to start services.</li> </ol>"},{"location":"developer-guide/documentation/#bulleted-lists","title":"Bulleted Lists","text":"<p>Bulleted lists are often referred to as undordered lists. Best used for listing details.</p> <p>Example: Things to remember when installing Arctyk ITSM</p> <pre><code>- Ensure you have Docker installed before you proceed. \n- You should always clone the `dev branch` repository.\n- Double-check that `.env` is added to `.gitignore`.\n</code></pre> <p>Output:</p> <ul> <li>Clone the repository.</li> <li>Copy the <code>.env.example</code> to <code>.env</code>.</li> <li>Run <code>docker compose up -d</code> to start services.</li> </ul>"},{"location":"developer-guide/documentation/#collapsible-sections","title":"Collapsible Sections","text":"<p>Use collapsible admonitions for optional or detailed content:</p> <pre><code>??? info \"Show full docker-compose.yml\"\n    ```yaml\n    version: \"3.9\"\n    services:\n      web:\n        build: .\n    ```\n</code></pre> <p>Output:</p> Show full docker-compose.yml <p>yaml version: \"3.9\" services: web: build: .</p>"},{"location":"developer-guide/documentation/#quick-formatting-reference","title":"Quick Formatting Reference","text":"Element Syntax Example Bold <code>**text**</code> Bold text Italic <code>_text_</code> Italic text Code <code>`text`</code> <code>inline code</code> Link <code>[label](url)</code> Visit Arctyk Image <code>![alt](path)</code> <code>![Logo](../assets/logo.svg)</code> Quote <code>&gt; text</code> &gt; Quoted block Divider <code>---</code> Horizontal line"},{"location":"developer-guide/documentation/#consistent-terminology","title":"Consistent Terminology","text":"Preferred Term Avoid Using Notes Arctyk ITSM Arctyk, ITSM system Always use full name on first mention Help Desk Helpdesk Capitalize properly Ticket Issue, request Consistent with UI terminology Asset Device, hardware Matches inventory module Docker Compose Docker-Compose, docker compose file Use official capitalization PostgreSQL Postgres \u201cPostgreSQL\u201d in documentation, \u201cPostgres\u201d acceptable in code"},{"location":"developer-guide/documentation/#example-layout-template","title":"Example Layout Template","text":"<p>Here\u2019s the recommended page layout for new documentation pages:</p> <pre><code># Page Title\n\nShort description of what this guide covers.\n\n---\n\n## 1. Overview\nBrief explanation.\n\n!!! tip\n    Helpful context or summary of what\u2019s next.\n\n---\n\n## 2. Steps\n\n1. Step one\n2. Step two\n3. Step three\n\n---\n\n## 3. Example\n\n```bash\ndocker compose exec web python manage.py migrate\n```\n</code></pre>"},{"location":"developer-guide/documentation/#next-steps","title":"Next Steps","text":"<p>Installation Guide</p> <p>Configuration Guide</p>"},{"location":"developer-guide/documentation/#final-notes","title":"Final Notes","text":"<ul> <li>Keep sentences short and easy to scan.  </li> <li>Avoid nested lists deeper than two levels.  </li> <li>Always include code fences for shell commands.  </li> <li>Keep headings concise and meaningful.</li> </ul>"},{"location":"developer-guide/github/","title":"Docs GitHub Setup","text":"<p>Arctyk Docs is linked and versioned through the <code>arctyk-docs</code> repo.</p>"},{"location":"developer-guide/github/#overview","title":"Overview","text":"Feature Status <code>arctyk-docs</code> submodule inside your Django project Linked correctly Docs version <code>v0.7.0-alpha.0</code> Committed and pushed <code>mkdocs.yml</code> + <code>overrides/partials</code> Active GitHub Pages publishing (main branch) Ready to build at https://arctyk-itsm.github.io/arctyk-docs Submodule pointer tracked in main repo Clean commit in <code>Arctyk</code>"},{"location":"developer-guide/github/#docs-version-badge","title":"Docs Version Badge","text":"Version Pattern Badge Color Example <code>*alpha*</code> \ud83d\udfe7 Orange <code>0.7.0-alpha.0</code> <code>*beta*</code> \ud83d\udfe8 Yellow <code>0.8.0-beta.0</code> <code>*rc*</code> \u26aa Light grey <code>0.9.0-rc.1</code> Stable (<code>no suffix</code>) \ud83d\udfe9 Bright green <code>1.0.0</code>"},{"location":"developer-guide/markdown-examples/","title":"Markdown Examples (Visual Reference)","text":"<p>This page provides live examples of how Markdown syntax renders in the Arctyk Docs site.  </p> <p>Use it as a quick reference when writing or reviewing documentation.</p> <p>Quick Links</p> <ul> <li>Headings</li> <li>Inline Formatting</li> <li>Lists</li> <li>Blockquotes</li> <li>Code Blocks</li> <li>Nested Code Fences</li> <li>Escaping Markdown Characters</li> <li>Tables</li> <li>Tables with Escaped Markdown</li> <li>Admonitions</li> <li>Collapsible Admonitions</li> <li>HTML Entities</li> <li>Combining Markdown Elements</li> </ul>"},{"location":"developer-guide/markdown-examples/#headings","title":"Headings","text":""},{"location":"developer-guide/markdown-examples/#example-markdown","title":"Example Markdown","text":"<pre><code># H1 Heading\n## H2 Heading\n### H3 Heading\n#### H4 Heading\n</code></pre>"},{"location":"developer-guide/markdown-examples/#output","title":"Output","text":""},{"location":"developer-guide/markdown-examples/#h1-heading","title":"H1 Heading","text":""},{"location":"developer-guide/markdown-examples/#h2-heading","title":"H2 Heading","text":""},{"location":"developer-guide/markdown-examples/#h3-heading","title":"H3 Heading","text":""},{"location":"developer-guide/markdown-examples/#h4-heading","title":"H4 Heading","text":""},{"location":"developer-guide/markdown-examples/#inline-formatting","title":"Inline Formatting","text":""},{"location":"developer-guide/markdown-examples/#example-markdown_1","title":"Example Markdown","text":"<pre><code>**Bold**  \n_Italic_  \n`Inline code`  \n~~Strikethrough~~  \n[Link text](https://arctyk.io)\n</code></pre>"},{"location":"developer-guide/markdown-examples/#output_1","title":"Output","text":"<p>Bold Italic <code>Inline code</code> ~~Strikethrough~~ Link text</p>"},{"location":"developer-guide/markdown-examples/#lists","title":"Lists","text":""},{"location":"developer-guide/markdown-examples/#example-markdown_2","title":"Example Markdown","text":"<pre><code>1. First step\n2. Second step\n   - Sub-step A\n   - Sub-step B\n3. Third step\n</code></pre>"},{"location":"developer-guide/markdown-examples/#output_2","title":"Output","text":"<ol> <li>First step  </li> <li>Second step  </li> <li>Sub-step A  </li> <li>Sub-step B  </li> <li>Third step</li> </ol>"},{"location":"developer-guide/markdown-examples/#blockquotes","title":"Blockquotes","text":""},{"location":"developer-guide/markdown-examples/#example-markdown_3","title":"Example Markdown","text":"<pre><code>&gt; This is a standard blockquote.\n&gt;\n&gt; It can include **bold text**, _italics_, and even `inline code`.\n</code></pre>"},{"location":"developer-guide/markdown-examples/#output_3","title":"Output","text":"<p>This is a standard blockquote.</p> <p>It can include bold text, italics, and even <code>inline code</code>.</p>"},{"location":"developer-guide/markdown-examples/#code-blocks","title":"Code Blocks","text":""},{"location":"developer-guide/markdown-examples/#example-markdown_4","title":"Example Markdown","text":"<p><pre><code>```bash\ndocker compose up -d\n</code></pre> <pre><code>### Output\n```bash\ndocker compose up -d\n</code></pre></p>"},{"location":"developer-guide/markdown-examples/#nested-code-fences","title":"Nested Code Fences","text":"<p>When showing Markdown examples that already contain code blocks, you must nest backticks properly. The outer fence must always have more backticks than the inner one.</p>"},{"location":"developer-guide/markdown-examples/#example-markdown_5","title":"Example Markdown","text":"<pre><code>````markdown\n```bash\ndocker compose up -d\n```\n````\n</code></pre>"},{"location":"developer-guide/markdown-examples/#output_4","title":"Output","text":"<pre><code>```bash\ndocker compose up -d\n```\n</code></pre>"},{"location":"developer-guide/markdown-examples/#escaping-markdown-characters","title":"Escaping Markdown Characters","text":""},{"location":"developer-guide/markdown-examples/#example-markdown_6","title":"Example Markdown","text":"<pre><code>\\*escaped asterisk\\*  \n\\_escaped underscore\\_  \n\\#escaped heading\\#  \n\\|escaped pipe\\|  \n\\`escaped backtick\\`\n</code></pre>"},{"location":"developer-guide/markdown-examples/#output_5","title":"Output","text":"<p>*escaped asterisk* _escaped underscore_ #escaped heading# |escaped pipe| `escaped backtick`</p>"},{"location":"developer-guide/markdown-examples/#tables","title":"Tables","text":""},{"location":"developer-guide/markdown-examples/#example-markdown_7","title":"Example Markdown","text":"<pre><code>| Setting | Description | Example |\n|----------|--------------|----------|\n| `DEBUG` | Enables debug mode | `False` |\n| `DB_PORT` | Database port | `5433` |\n| `TIME_ZONE` | Django timezone | `America/Toronto` |\n</code></pre>"},{"location":"developer-guide/markdown-examples/#output_6","title":"Output","text":"Setting Description Example <code>DEBUG</code> Enables debug mode <code>False</code> <code>DB_PORT</code> Database port <code>5433</code> <code>TIME_ZONE</code> Django timezone <code>America/Toronto</code>"},{"location":"developer-guide/markdown-examples/#tables-with-escaped-markdown","title":"Tables with Escaped Markdown","text":""},{"location":"developer-guide/markdown-examples/#example-markdown_8","title":"Example Markdown","text":"<pre><code>| Symbol | Escaped Example | Renders As |\n|---------|-----------------|------------|\n| `*` | `\\*bold\\*` | \\*bold\\* |\n| `_` | `\\_italic\\_` | \\_italic\\_ |\n| `#` | `\\# heading` | \\# heading |\n| `` ` `` | `` \\`code\\` `` | \\`code\\` |\n| `|` | `\\| pipe \\|` | \\| pipe \\| |\n</code></pre>"},{"location":"developer-guide/markdown-examples/#output_7","title":"Output","text":"Symbol Escaped Example Renders As <code>*</code> <code>\\*bold\\*</code> *bold* <code>_</code> <code>\\_italic\\_</code> _italic_ <code>#</code> <code>\\# heading</code> # heading <code>`</code> <code>\\`code\\`</code> `code` <code>|</code> <code>\\| pipe \\|</code> | pipe |"},{"location":"developer-guide/markdown-examples/#admonitions","title":"Admonitions","text":""},{"location":"developer-guide/markdown-examples/#example-markdown_9","title":"Example Markdown","text":"<pre><code>!!! note\n    This is a general note.\n\n!!! tip \"Quick Tip\"\n    Use `docker compose up -d --build` to rebuild containers.\n\n!!! warning \"Caution\"\n    Never commit your `.env` file to Git.\n</code></pre>"},{"location":"developer-guide/markdown-examples/#output_8","title":"Output","text":"<p>Note</p> <p>This is a general note.</p> <p>Quick Tip</p> <p>Use <code>docker compose up -d --build</code> to rebuild containers.</p> <p>Caution</p> <p>Never commit your <code>.env</code> file to Git.</p>"},{"location":"developer-guide/markdown-examples/#collapsible-admonitions","title":"Collapsible Admonitions","text":""},{"location":"developer-guide/markdown-examples/#example-markdown_10","title":"Example Markdown","text":"<pre><code>??? info \"Show example\"\n    ```yaml\n    version: \"3.9\"\n    services:\n      web:\n        build: .\n    ```\n</code></pre>"},{"location":"developer-guide/markdown-examples/#output_9","title":"Output","text":"Show example <pre><code>version: \"3.9\"\nservices:\n  web:\n    build: .\n</code></pre>"},{"location":"developer-guide/markdown-examples/#html-entities","title":"HTML Entities","text":""},{"location":"developer-guide/markdown-examples/#example-markdown_11","title":"Example Markdown","text":"<pre><code>| Character | HTML Entity | Output |\n|------------|--------------|---------|\n| Backtick | `&amp;#96;` | &amp;#96; |\n| Less than | `&amp;lt;` | &amp;lt; |\n| Greater than | `&amp;gt;` | &amp;gt; |\n| Ampersand | `&amp;amp;` | &amp;amp; |\n</code></pre>"},{"location":"developer-guide/markdown-examples/#output_10","title":"Output","text":"Character HTML Entity Output Backtick <code>&amp;#96;</code> ` Less than <code>&amp;lt;</code> &lt; Greater than <code>&amp;gt;</code> &gt; Ampersand <code>&amp;amp;</code> &amp;"},{"location":"developer-guide/markdown-examples/#combining-markdown-elements","title":"Combining Markdown Elements","text":""},{"location":"developer-guide/markdown-examples/#example-markdown_12","title":"Example Markdown","text":"<pre><code>!!! example \"Combining Elements\"\n    1. Run `docker compose up -d`\n    2. Open [localhost:8000](http://localhost:8000)\n    3. Verify the containers are running:\n        ```bash\n        docker ps\n        ```\n</code></pre>"},{"location":"developer-guide/markdown-examples/#output_11","title":"Output","text":"<p>Combining Elements</p> <ol> <li>Run <code>docker compose up -d</code></li> <li>Open localhost:8000</li> <li>Verify the containers are running:     <pre><code>docker ps\n</code></pre></li> </ol>"},{"location":"developer-guide/markdown-examples/#summary","title":"Summary","text":"Section Demonstrates Headings Heading styles Inline Formatting Bold, italics, links Lists Ordered and unordered lists Blockquotes Indented callouts Code Blocks Syntax highlighting Nested Code Fences Showing Markdown inside Markdown Escaping Markdown Literal formatting characters Tables Structured data Tables with Escaped Markdown Markdown inside tables Admonitions Tips, notes, and warnings Collapsible Admonitions Expandable content HTML Entities Character references Combining Markdown Elements Complex formatting examples"},{"location":"developer-guide/testing/","title":"Testing","text":"<p>Coming soon...</p>"},{"location":"developer-guide/troubleshooting/","title":"Troubleshooting","text":""},{"location":"developer-guide/troubleshooting/#web-server-does-not-load-website","title":"Web server does not load website","text":"<p>This can happen for a number or reasons. The most common reason is that the code base has error or errors and is preventing the website from being served. </p> <ol> <li>Check Docker logs for errors:</li> </ol> <pre><code>docker compose logs -f\n</code></pre> <ol> <li>Correct any errors you find.</li> <li>Stop the container: <code>docker compose down</code></li> <li>Rebuild and restart the container: <code>docker compoes up -d --build</code></li> </ol> <p>Tip</p> <p>To stop or exit Docker logs, use <code>CNTRL + C</code></p>"},{"location":"developer-guide/troubleshooting/#common-linting-errors","title":"Common Linting Errors","text":"<p>These linting errors may or may not break the build. The two main linters are Pylance and DjLint. </p> <ul> <li>Expected whitespace<ul> <li>Explanation: Common error on Django blocks.</li> <li>Error:</li> <li>Solution: Add whitespace between the block tag text and brackets.</li> </ul> </li> <li>Expected 2 blank lines: <ul> <li>Explanation: Pylance expects two blank lines between functions.</li> <li>Error: <code>expected 2 blank lines, found 1</code></li> <li>Solution: Add another blank line above the indicated line and resave file.</li> </ul> </li> <li>Trailing whitespace<ul> <li>Explanation: There is whitespace added to the end of the line.</li> <li>Error:</li> <li>Solution: Remove any trailing whitespace and resave file.</li> </ul> </li> </ul>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>After installing Arctyk ITSM using Docker, you\u2019ll need to configure environment variables, database connections, and optional integrations before launching it in production.</p> <p>This guide walks you through customizing your <code>.env</code>, adjusting <code>docker-compose.yml</code>, and verifying that all services are connected properly.</p>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<p>Arctyk ITSM uses a <code>.env</code> file located in the project root <code>/Arctyk/.env</code> to manage configuration. This file is automatically loaded when running:</p> <pre><code>docker compose up -d\n</code></pre> <p>Here\u2019s an example <code>.env</code> configured for the default Arctyk ITSM stack:</p> <pre><code># \u2500\u2500\u2500 General Settings \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nDEBUG=False\nSECRET_KEY=your-strong-secret-key\nALLOWED_HOSTS=localhost,127.0.0.1,arctyk.local\n\n# \u2500\u2500\u2500 Database Configuration \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nDB_NAME=arctyk\nDB_USER=arctyk\nDB_PASSWORD=arctyk_password\nDB_HOST=db\nDB_PORT=5433\n\n# \u2500\u2500\u2500 Email Settings \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nEMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend\nEMAIL_HOST=smtp.office365.com\nEMAIL_PORT=587\nEMAIL_USE_TLS=True\nEMAIL_HOST_USER=helpdesk@yourdomain.com\nEMAIL_HOST_PASSWORD=yourpassword\nDEFAULT_FROM_EMAIL=helpdesk@yourdomain.com\n\n# \u2500\u2500\u2500 Localization \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nTIME_ZONE=America/Toronto\nLANGUAGE_CODE=en-ca\n\n# \u2500\u2500\u2500 Optional Features \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nENABLE_JIRA=False\nENABLE_ZENDESK=False\nENABLE_POWER_PLATFORM=False\nENABLE_CELERY=True\nENABLE_CHANGELOG=True\n</code></pre> <p>Tip</p> <p>Never commit your <code>.env</code> file to version control. Keep it local or managed securely via Docker Secrets, Vault, or CI/CD environment settings.</p>"},{"location":"getting-started/configuration/#docker-compose-configuration","title":"Docker Compose Configuration","text":"<p>Your <code>docker-compose.yml</code> defines the Arctyk ITSM runtime stack:</p> <pre><code>version: \"3.9\"\n\nservices:\n  web:\n    build: .\n    container_name: arctyk_web\n    command: &gt;\n      sh -c \"python manage.py migrate &amp;&amp;\n             python manage.py collectstatic --noinput &amp;&amp;\n             gunicorn helpdesk.asgi:application -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000\"\n    volumes:\n      - .:/code\n      - static_volume:/code/staticfiles\n      - media_volume:/code/media\n    ports:\n      - \"8000:8000\"\n    env_file:\n      - .env\n    depends_on:\n      - db\n    restart: unless-stopped\n\n  db:\n    image: postgres:17\n    container_name: arctyk_db\n    environment:\n      POSTGRES_DB: ${DB_NAME}\n      POSTGRES_USER: ${DB_USER}\n      POSTGRES_PASSWORD: ${DB_PASSWORD}\n    ports:\n      - \"5433:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n  static_volume:\n  media_volume:\n</code></pre> <p>This configuration ensures:</p> <ul> <li>The web service builds your Django app and runs via Gunicorn + UvicornWorker.</li> <li>The db service runs PostgreSQL 17 on port 5433.</li> <li>Static and media files persist via Docker volumes.</li> </ul>"},{"location":"getting-started/configuration/#django-settings-overview","title":"Django Settings Overview","text":"<p>Arctyk ITSM\u2019s <code>helpdesk/settings.py</code> automatically loads configuration from your <code>.env</code>. You rarely need to modify this file directly \u2014 just adjust the environment values.</p> <p>Key settings linked to your <code>.env</code>:</p> Setting Description Example <code>DEBUG</code> Enables or disables debug mode <code>False</code> <code>SECRET_KEY</code> Unique Django secret key <code>your-strong-secret-key</code> <code>ALLOWED_HOSTS</code> Allowed domains <code>localhost, arctyk.local</code> <code>DATABASES</code> Database connection details Loaded from <code>.env</code> <code>EMAIL_*</code> SMTP configuration Loaded from <code>.env</code> <code>TIME_ZONE</code> Django timezone <code>America/Toronto</code>"},{"location":"getting-started/configuration/#database-configuration","title":"Database Configuration","text":"<p>Arctyk ITSM uses PostgreSQL as its default database. Your connection is fully defined in <code>.env</code>, and mapped in <code>docker-compose.yml</code> under the db service.</p> <p>If your PostgreSQL server runs externally or on a different port, update:</p> <p><pre><code>DB_HOST=your-db-server-host\nDB_PORT=5433\n</code></pre> To apply changes:</p> <pre><code>docker compose down\ndocker compose up -d\n</code></pre> <p>You can verify the connection inside the web container:</p> <pre><code>docker compose exec web python manage.py dbshell\n</code></pre>"},{"location":"getting-started/configuration/#email-configuration","title":"Email Configuration","text":"<p>Email enables features like:</p> <ul> <li>Ticket creation/assignment notifications</li> <li>Password reset emails</li> <li>Daily summaries</li> </ul> <p>Use the SMTP backend (recommended for production):</p> <p><pre><code>EMAIL_BACKEND=django.core.mail.backends.smtp.EmailBackend\nEMAIL_HOST=smtp.office365.com\nEMAIL_PORT=587\nEMAIL_USE_TLS=True\nEMAIL_HOST_USER=helpdesk@yourdomain.com\nEMAIL_HOST_PASSWORD=yourpassword\nDEFAULT_FROM_EMAIL=helpdesk@yourdomain.com\n</code></pre> To test your setup:</p> <pre><code>docker compose exec web python manage.py sendtestemail helpdesk@yourdomain.com\n</code></pre>"},{"location":"getting-started/configuration/#optional-features","title":"Optional Features","text":"<p>Arctyk ITSM includes modular integrations you can enable as needed. Set the following in your <code>.env</code> file:</p> Feature Variable Default Description Jira Integration <code>ENABLE_JIRA</code> <code>False</code> Connect tickets with Jira issues Zendesk Bridge <code>ENABLE_ZENDESK</code> <code>False</code> Sync with existing Zendesk data Power Platform <code>ENABLE_POWER_PLATFORM</code> <code>False</code> Allow Power Automate / Power Apps API access Scheduled Tasks <code>ENABLE_CELERY</code> <code>True</code> Enable Celery for background jobs Change Logging <code>ENABLE_CHANGELOG</code> <code>True</code> Track changes to assets and tickets"},{"location":"getting-started/configuration/#security-recommendations","title":"Security Recommendations","text":"<p>Before going live:</p> <ul> <li>Set <code>DEBUG=False</code></li> <li>Use a long, unique <code>SECRET_KEY</code></li> <li>Limit <code>ALLOWED_HOSTS</code> to your actual domain</li> <li>Serve over <code>HTTPS</code> behind a reverse proxy (e.g. NGINX)</li> <li>Keep <code>.env</code> and database volumes out of version control</li> <li>Schedule regular backups for:<ul> <li><code>/var/lib/postgresql/data</code></li> <li><code>/code/media</code></li> <li><code>.env</code> and configuration files</li> </ul> </li> </ul>"},{"location":"getting-started/configuration/#next-steps","title":"Next Steps","text":"<p>Once configuration is complete, proceed to:</p> <ul> <li> <p>Continue to Deployment \u2192  to run Arctyk ITSM in production.</p> </li> <li> <p>Or explore the User Guide \u2192  to start creating and managing tickets.</p> </li> </ul>"},{"location":"getting-started/deployment/","title":"Deployment","text":"<p>This guide explains how to deploy Arctyk ITSM to a production environment using Docker Compose. It builds on your installation and configuration steps to ensure your instance runs securely, efficiently, and automatically restarts on failure.</p> <p>Warning</p> <p>The deployment documentation is a work-in-progress and should not be used with caution.</p>"},{"location":"getting-started/deployment/#prerequisites","title":"Prerequisites","text":"<p>Before you deploy, make sure you have:</p> Requirement Description Docker Installed on your host server (<code>docker --version</code>) Docker Compose Version 2.0 or later (<code>docker compose version</code>) Domain Name Example: <code>itsm.example.com</code> SSL Certificate Provided by Let\u2019s Encrypt or your organization Configured <code>.env</code> Contains environment variables for production (see Configuration \u2192)"},{"location":"getting-started/deployment/#production-ready-docker-compose","title":"Production-Ready Docker Compose","text":"<p>Your base <code>docker-compose.yml</code> file already defines web and db. For production, extend it by adding NGINX as a reverse proxy and <code>static/media</code> volumes for persistence.</p> <p>Example: <code>docker-compose.prod.yml</code></p> <pre><code>version: \"3.9\"\n\nservices:\n  web:\n    build: .\n    container_name: arctyk_web\n    command: &gt;\n      sh -c \"\n      python manage.py migrate &amp;&amp;\n      python manage.py collectstatic --noinput &amp;&amp;\n      gunicorn helpdesk.asgi:application -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000\n      \"\n    volumes:\n      - .:/code\n      - static_volume:/code/staticfiles\n      - media_volume:/code/media\n    env_file:\n      - .env\n    depends_on:\n      - db\n    restart: unless-stopped\n\n  db:\n    image: postgres:17\n    container_name: arctyk_db\n    environment:\n      POSTGRES_DB: ${DB_NAME}\n      POSTGRES_USER: ${DB_USER}\n      POSTGRES_PASSWORD: ${DB_PASSWORD}\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    restart: unless-stopped\n\n  nginx:\n    image: nginx:1.27-alpine\n    container_name: arctyk_nginx\n    ports:\n      - \"80:80\"\n      - \"443:443\"\n    volumes:\n      - ./nginx/conf.d:/etc/nginx/conf.d\n      - static_volume:/code/staticfiles\n      - media_volume:/code/media\n      - /etc/letsencrypt:/etc/letsencrypt  # for SSL\n    depends_on:\n      - web\n    restart: unless-stopped\n\nvolumes:\n  postgres_data:\n  static_volume:\n  media_volume:\n</code></pre>"},{"location":"getting-started/deployment/#configure-nginx","title":"Configure NGINX","text":"<p>Create a new folder for your NGINX configuration:</p> <pre><code>mkdir -p nginx/conf.d\n</code></pre> <p>Then add your config file: nginx/conf.d/arctyk.conf</p> <p><pre><code>server {\n    listen 80;\n    server_name itsm.example.com;\n\n    location /static/ {\n        alias /code/staticfiles/;\n    }\n\n    location /media/ {\n        alias /code/media/;\n    }\n\n    location / {\n        proxy_pass http://web:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n\n    # Redirect all HTTP traffic to HTTPS (optional)\n    # return 301 https://$host$request_uri;\n}\n</code></pre> For SSL, you can extend this with Let\u2019s Encrypt (see below).</p>"},{"location":"getting-started/deployment/#enable-https-lets-encrypt","title":"Enable HTTPS (Let\u2019s Encrypt)","text":"<p>You can add Certbot to your stack or use your organization\u2019s SSL certs.</p> <p>To use Let\u2019s Encrypt:</p> <ol> <li>Run Certbot on the host (not inside Docker):</li> </ol> <p><pre><code>sudo apt install certbot\nsudo certbot certonly --standalone -d itsm.example.com\n</code></pre> 2. Mount your certificate paths into the NGINX container:</p> <p><pre><code>- /etc/letsencrypt:/etc/letsencrypt\n</code></pre> 3. Update your NGINX config to use HTTPS:</p> <pre><code>    server {\n    listen 443 ssl;\n    server_name itsm.example.com;\n\n    ssl_certificate /etc/letsencrypt/live/itsm.example.com/fullchain.pem;\n    ssl_certificate_key /etc/letsencrypt/live/itsm.example.com/privkey.pem;\n\n    include /etc/letsencrypt/options-ssl-nginx.conf;\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;\n\n    location /static/ {\n        alias /code/staticfiles/;\n    }\n\n    location /media/ {\n        alias /code/media/;\n    }\n\n    location / {\n        proxy_pass http://web:8000;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre>"},{"location":"getting-started/deployment/#collect-static-files","title":"Collect Static Files","text":"<p>To ensure Django serves all assets properly:</p> <p><pre><code>docker compose -f docker-compose.prod.yml exec web python manage.py collectstatic --noinput\n</code></pre> Static files will be stored in the <code>static_volume</code> and mounted by NGINX.</p>"},{"location":"getting-started/deployment/#apply-database-migrations","title":"Apply Database Migrations","text":"<p>Before first use or after updates:</p> <p><pre><code>docker compose -f docker-compose.prod.yml exec web python manage.py migrate\n</code></pre> Optionally, create a superuser:</p> <pre><code>docker compose -f docker-compose.prod.yml exec web python manage.py createsuperuser\n</code></pre>"},{"location":"getting-started/deployment/#starting-the-stack","title":"Starting the Stack","text":"<p>Launch the production stack:</p> <p><pre><code>docker compose -f docker-compose.prod.yml up -d --build\n</code></pre> View logs:</p> <p><pre><code>docker compose logs -f web\ndocker compose logs -f nginx\n</code></pre> Restart after updates:</p> <pre><code>docker compose restart web\n</code></pre>"},{"location":"getting-started/deployment/#maintenance-tips","title":"Maintenance Tips","text":"Task Command Rebuild containers <code>docker compose -f docker-compose.prod.yml up -d --build</code> Stop the stack <code>docker compose down</code> Run Django shell <code>docker compose exec web python manage.py shell</code> Backup database <code>docker compose exec db pg_dump -U $DB_USER $DB_NAME &gt; backup.sql</code> Restore database <code>docker compose exec -T db psql -U $DB_USER $DB_NAME &lt; backup.sql</code> Clean unused images <code>docker system prune -af</code>"},{"location":"getting-started/deployment/#automating-with-systemd-optional","title":"Automating with Systemd (Optional)","text":"<p>For environments without container orchestration, you can auto-start Docker Compose on boot:</p> <p><pre><code>sudo nano /etc/systemd/system/arctyk.service\n</code></pre> Example unit file:</p> <p><pre><code>[Unit]\nDescription=Arctyk ITSM Docker Compose\nAfter=docker.service\nRequires=docker.service\n\n[Service]\nWorkingDirectory=/opt/arctyk\nExecStart=/usr/bin/docker compose -f docker-compose.prod.yml up -d\nExecStop=/usr/bin/docker compose -f docker-compose.prod.yml down\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> Then:</p> <pre><code>sudo systemctl enable arctyk\nsudo systemctl start arctyk\n</code></pre>"},{"location":"getting-started/deployment/#post-deployment-checklist","title":"Post-deployment Checklist","text":"<ul> <li>DEBUG=False</li> <li>ALLOWED_HOSTS updated to your domain</li> <li>SSL configured and auto-renewing</li> <li>Superuser created and admin access verified</li> <li>Static &amp; media volumes persistent</li> <li>Database backup procedure tested</li> </ul>"},{"location":"getting-started/deployment/#next-steps","title":"Next Steps","text":"<p>Once deployed, you can:</p> <ul> <li> <p>Continue to User Guide \u2192 to start creating and managing tickets.</p> </li> <li> <p>Or check Developer Guide \u2192 to understand the system architecture and modular apps.</p> </li> </ul>"},{"location":"getting-started/installation/","title":"Arctyk ITSM Installation Guide (Docker)","text":"<p>This guide explains how to set up a fresh installation of Arctyk ITSM using Docker and Docker Compose. </p> <p>By the end of this procedure, you\u2019ll have the application running locally with a Postgres database.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Make sure the following are installed on your system:</p> <ul> <li>Docker (v24+ recommended)</li> <li>Docker Compose (v2.x)</li> <li>Clone the repo:</li> </ul> <pre><code>git clone https://github.com/Arctyk-ITSM/arctyk-itsm.git\ncd arctyk\n</code></pre>"},{"location":"getting-started/installation/#project-structure","title":"Project Structure","text":"<p>Your repo should look like this:</p> <pre><code>arctyk/\n\u251c\u2500\u2500 docker/                     # Docker-related files\n\u2502   \u251c\u2500\u2500 web.Dockerfile          # Django + Gunicorn container\n\u2502   \u2514\u2500\u2500 db.Dockerfile           # (optional) custom Postgres container\n\u251c\u2500\u2500 docker-compose.yml          # Compose setup for services\n\u251c\u2500\u2500 .env                        # Environment variables (not committed)\n\u251c\u2500\u2500 requirements.txt            # Python dependencies\n\u251c\u2500\u2500 STATIC_SRC/                 # SCSS/JS assets\n\u2502   \u251c\u2500\u2500 scss/\n\u2502   \u2514\u2500\u2500 css/\n\u251c\u2500\u2500 src/                        # Django source\n\u2502   \u251c\u2500\u2500 manage.py\n\u2502   \u251c\u2500\u2500 helpdesk/               # Main Django project (settings, asgi, wsgi)\n\u2502   \u251c\u2500\u2500 tickets/                # Ticketing app\n\u2502   \u251c\u2500\u2500 users/                  # User management app\n\u2502   \u251c\u2500\u2500 projects/               # Project tracking app\n\u2502   \u251c\u2500\u2500 inventory/              # Asset inventory app\n\u2502   \u2514\u2500\u2500 reports/                # Reporting app\n\u251c\u2500\u2500 media/                      # Uploaded files (mounted in container)\n\u2514\u2500\u2500 static/                     # Collected static files (mounted in container)\n</code></pre>"},{"location":"getting-started/installation/#environment-variables","title":"Environment Variables","text":"<p>Create a <code>.env</code> file in the project root:</p> <pre><code># Django\nDJANGO_SECRET_KEY=super-secret-key\nDJANGO_DEBUG=True\nDJANGO_ALLOWED_HOSTS=*\n\n# Database\nPOSTGRES_DB=arctyk\nPOSTGRES_USER=arctyk\nPOSTGRES_PASSWORD=arctyk\nPOSTGRES_HOST=db\nPOSTGRES_PORT=5432\n\n# Static / Media\nSTATIC_ROOT=/code/static\nMEDIA_ROOT=/code/media\n</code></pre>"},{"location":"getting-started/installation/#docker-compose-file","title":"Docker Compose File","text":"<p>Example <code>docker-compose.yml</code>:</p> <pre><code>version: \"3.9\"\n\nservices:\n  db:\n    image: postgres:17\n    restart: always\n    environment:\n      POSTGRES_DB: ${POSTGRES_DB}\n      POSTGRES_USER: ${POSTGRES_USER}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}\n    ports:\n      - \"5433:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\n  web:\n    build:\n       context: .\n       dockerfile: docker/web.Dockerfile\n    command: &gt;\n      sh -c \"python src/manage.py migrate &amp;&amp;\n              python src/manage.py collectstatic --noinput &amp;&amp;\n              gunicorn helpdesk.asgi:application -k uvicorn.workers.UvicornWorker -b 0.0.0.0:8000\"\n    volumes:\n      - .:/code\n    env_file: .env\n    ports:\n      - \"8000:8000\"\n    depends_on:\n      - db\n\nvolumes:\n    postgres_data:\n</code></pre>"},{"location":"getting-started/installation/#dockerfile-for-web","title":"Dockerfile for Web","text":"<p>In <code>docker/web.Dockefile</code>:</p> <pre><code># Use a slim Python base\nFROM python:3.13-slim\n\nENV PYTHONUNBUFFERED=1 \\\n      PYTHONDONTWRITEBYTECODE=1\n\nWORKDIR /code\n\n# Install dependencies\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    build-essential libpq-dev libjpeg-dev zlib1g-dev \\\n    &amp;&amp; rm -rf /var/lib/apt/lists/*\n\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\nCOPY . .\n</code></pre>"},{"location":"getting-started/installation/#build-and-run","title":"Build and Run","text":"<p>Build and start containers:</p> <p><pre><code>docker compose up -d --build\n</code></pre> Check logs:</p> <pre><code>docker compose logs -f\n</code></pre>"},{"location":"getting-started/installation/#automatic-admin-user","title":"Automatic Admin User","text":"<p>Arctyk ITSM automatically creates a default superuser/admin account the first time the app starts if one does not already exist.</p> <ul> <li>Username: <code>admin</code></li> <li>Pasword: <code>adminpass</code></li> <li>Email: <code>admin@example.com</code></li> </ul>"},{"location":"getting-started/installation/#database-setup","title":"Database Setup","text":"<p>Once the containers are running, run migrations:</p> <pre><code>docker compose exec web python src/manage.py migrate\n</code></pre> <p>Create a superuser:</p> <pre><code>docker compose exec web python src/manage.py createsuperuser\n</code></pre>"},{"location":"getting-started/installation/#access-the-app","title":"Access the App","text":"<ul> <li>Web App: http://localhost:8000</li> <li>Admin Panel: http://localhost:8000/admin/</li> </ul>"},{"location":"getting-started/installation/#first-run-data-setup","title":"First-Run Data Setup","text":"<p>(Optional) Load fixtures or auto-create data like <code>HelpdeskSettings</code>:</p> <pre><code>docker compose exec web python sr/manage.py loaddata initial_data.json\n</code></pre>"},{"location":"getting-started/installation/#stopping-restarting","title":"Stopping &amp; Restarting","text":"<pre><code>docker compose down # stop\ndocker compuse up -d  # restart\n</code></pre>"},{"location":"getting-started/installation/#thats-it","title":"That's It!","text":"<p>You should now have a fully running Arctyk ITSM instance inside Docker.</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Once configuration is complete, proceed to:</p> <ul> <li> <p>Continue to Configuration \u2192  to run Arctyk ITSM in production.</p> </li> <li> <p>Or explore the User Guide \u2192  to start creating and managing tickets.</p> </li> </ul>"},{"location":"integrations/jira/","title":"Jira Integration","text":"<p>Jira integration is not available in v0.7.0-alpha.0.</p>"},{"location":"integrations/power-platform/","title":"Power Platform Integration","text":"<p>Power Platform integration is not available in v0.7.0-alpha.0.</p>"},{"location":"integrations/zendesk/","title":"Zendesk Integration","text":"<p>Zendesk integration is not available in v0.7.0-alpha.0.</p>"},{"location":"user-guide/assets/","title":"Assets","text":"<p>Coming soon...</p>"},{"location":"user-guide/projects/","title":"Projects","text":"<p>Coming soon...</p>"},{"location":"user-guide/reports/","title":"Reports","text":"<p>Coming soon...</p>"},{"location":"user-guide/tickets/","title":"Tickets","text":"<p>Coming soon...</p>"},{"location":"user-guide/users/","title":"Users","text":"<p>Coming soon...</p>"}]}